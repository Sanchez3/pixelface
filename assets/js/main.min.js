(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/sanchez/Work/test/pixelface/src/assets/js/main.js":[function(require,module,exports){
/**
 * Created by sanchez 
 */
'use strict';
window.game = new Phaser.Game('100', '100', Phaser.CANVAS, 'mycanvas', null, true);
window.game.state.add('Boot', require('./states/boot'));
window.game.state.add('Preloader', require('./states/preloader'));
window.game.state.add('State1', require('./states/state1'));
window.game.state.start('Boot');
function showStats() {
    var stats = new Stats();
    stats.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom
    var fs = document.createElement('div');
    fs.style.position = 'absolute';
    fs.style.left = 0;
    fs.style.top = 0;
    fs.style.zIndex = 999;
    fs.appendChild(stats.domElement);
    document.body.appendChild(fs);

    function animate() {
        stats.begin();
        // monitored code goes here
        stats.end();
        requestAnimationFrame(animate);
    }
    requestAnimationFrame(animate);
}
showStats();
},{"./states/boot":"/Users/sanchez/Work/test/pixelface/src/assets/js/states/boot.js","./states/preloader":"/Users/sanchez/Work/test/pixelface/src/assets/js/states/preloader.js","./states/state1":"/Users/sanchez/Work/test/pixelface/src/assets/js/states/state1.js"}],"/Users/sanchez/Work/test/pixelface/src/assets/js/states/boot.js":[function(require,module,exports){
(function() {
    'use strict';


    var Boot = function() {};

    module.exports = Boot;

    Boot.prototype = {
        preload: function() {
            // this.load.image('load_i1', 'assets/img/p1/load_i1.png');
            // var lsData3 = {
            //     'frames': [

            //         {
            //             'filename': 'loading touch_00000.png',
            //             'frame': { 'x': 1, 'y': 1, 'w': 204, 'h': 30 },
            //             'rotated': false,
            //             'trimmed': true,
            //             'spriteSourceSize': { 'x': 565, 'y': 126, 'w': 204, 'h': 30 },
            //             'sourceSize': { 'w': 1334, 'h': 308 }
            //         }, {
            //             'filename': 'loading touch_00001.png',
            //             'frame': { 'x': 1, 'y': 33, 'w': 204, 'h': 30 },
            //             'rotated': false,
            //             'trimmed': true,
            //             'spriteSourceSize': { 'x': 565, 'y': 126, 'w': 204, 'h': 30 },
            //             'sourceSize': { 'w': 1334, 'h': 308 }
            //         }, {
            //             'filename': 'loading touch_00002.png',
            //             'frame': { 'x': 153, 'y': 739, 'w': 194, 'h': 84 },
            //             'rotated': false,
            //             'trimmed': true,
            //             'spriteSourceSize': { 'x': 570, 'y': 99, 'w': 194, 'h': 84 },
            //             'sourceSize': { 'w': 1334, 'h': 308 }
            //         }, {
            //             'filename': 'loading touch_00003.png',
            //             'frame': { 'x': 199, 'y': 381, 'w': 170, 'h': 178 },
            //             'rotated': false,
            //             'trimmed': true,
            //             'spriteSourceSize': { 'x': 582, 'y': 52, 'w': 170, 'h': 178 },
            //             'sourceSize': { 'w': 1334, 'h': 308 }
            //         }, {
            //             'filename': 'loading touch_00004.png',
            //             'frame': { 'x': 1, 'y': 597, 'w': 150, 'h': 196 },
            //             'rotated': false,
            //             'trimmed': true,
            //             'spriteSourceSize': { 'x': 592, 'y': 43, 'w': 150, 'h': 196 },
            //             'sourceSize': { 'w': 1334, 'h': 308 }
            //         }, {
            //             'filename': 'loading touch_00005.png',
            //             'frame': { 'x': 153, 'y': 597, 'w': 196, 'h': 140 },
            //             'rotated': false,
            //             'trimmed': true,
            //             'spriteSourceSize': { 'x': 569, 'y': 71, 'w': 196, 'h': 140 },
            //             'sourceSize': { 'w': 1334, 'h': 308 }
            //         }, {
            //             'filename': 'loading touch_00006.png',
            //             'frame': { 'x': 1, 'y': 193, 'w': 196, 'h': 204 },
            //             'rotated': false,
            //             'trimmed': true,
            //             'spriteSourceSize': { 'x': 569, 'y': 39, 'w': 196, 'h': 204 },
            //             'sourceSize': { 'w': 1334, 'h': 308 }
            //         }, {
            //             'filename': 'loading touch_00007.png',
            //             'frame': { 'x': 1, 'y': 399, 'w': 196, 'h': 196 },
            //             'rotated': false,
            //             'trimmed': true,
            //             'spriteSourceSize': { 'x': 569, 'y': 43, 'w': 196, 'h': 196 },
            //             'sourceSize': { 'w': 1334, 'h': 308 }
            //         }, {
            //             'filename': 'loading touch_00008.png',
            //             'frame': { 'x': 207, 'y': 1, 'w': 176, 'h': 196 },
            //             'rotated': false,
            //             'trimmed': true,
            //             'spriteSourceSize': { 'x': 579, 'y': 43, 'w': 176, 'h': 196 },
            //             'sourceSize': { 'w': 1334, 'h': 308 }
            //         }, {
            //             'filename': 'loading touch_00009.png',
            //             'frame': { 'x': 199, 'y': 199, 'w': 192, 'h': 180 },
            //             'rotated': false,
            //             'trimmed': true,
            //             'spriteSourceSize': { 'x': 571, 'y': 51, 'w': 192, 'h': 180 },
            //             'sourceSize': { 'w': 1334, 'h': 308 }
            //         }, {
            //             'filename': 'loading touch_00010.png',
            //             'frame': { 'x': 1, 'y': 101, 'w': 200, 'h': 90 },
            //             'rotated': false,
            //             'trimmed': true,
            //             'spriteSourceSize': { 'x': 567, 'y': 96, 'w': 200, 'h': 90 },
            //             'sourceSize': { 'w': 1334, 'h': 308 }
            //         }, {
            //             'filename': 'loading touch_00011.png',
            //             'frame': { 'x': 1, 'y': 65, 'w': 202, 'h': 34 },
            //             'rotated': false,
            //             'trimmed': true,
            //             'spriteSourceSize': { 'x': 566, 'y': 124, 'w': 202, 'h': 34 },
            //             'sourceSize': { 'w': 1334, 'h': 308 }
            //         }
            //     ],
            //     'meta': {
            //         'app': 'http://www.codeandweb.com/texturepacker',
            //         'version': '1.0',
            //         'image': 'load_sprite3.png',
            //         'format': 'RGBA8888',
            //         'size': { 'w': 392, 'h': 824 },
            //         'scale': '1',
            //         'smartupdate': '$TexturePacker:SmartUpdate:262b7393a6ab76aa959acef5936ba65b:acc9dc5f26120f32e9e157a174c1abde:0f229978f75819fd1693cd09fc50d366$'
            //     }
            // };
            // this.load.atlasJSONArray('load_sprite3', 'assets/img/p1/load_sprite3.png', null, lsData3);

        },

        create: function() {
            var that = this;
            // configure game
            this.game.input.maxPointers = 1;
            this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
            // this.scale.scaleMode = Phaser.ScaleManager.USER_SCALE;
            this.scale.pageAlignHorizontally = true;
            this.scale.pageAlignVertically = true;
            this.stage.disableVisibilityChange = true;

            // this.scale.setUserScale(window.innerWidth / 750, window.innerWidth / 750, 0, 0);
            // if (this.game.device.desktop) {
            //     this.game.scale.pageAlignHorizontally = true;
            // } else {
            //
            //
            //     if(!window.android){
            //         this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
            //         // this.scale.pageAlignHorizontally = true;
            //         // this.scale.pageAlignVertically = true;
            //     }else {
            //         this.scale.scaleMode = Phaser.ScaleManager.USER_SCALE;
            //         this.scale.setUserScale(window.innerWidth/750,window.innerWidth/750,0,0);
            //     }
            //
            //
            //     // $('#babysiri-game').find('canvas').css('bottom','0');
            // }
            this.game.state.start('Preloader');
        }

    };

}());

},{}],"/Users/sanchez/Work/test/pixelface/src/assets/js/states/preloader.js":[function(require,module,exports){
/**
 * Created by sanchez on 17/5/22.
 */
(function() {
    'use strict';
    var Preloader = function() {};

    module.exports = Preloader;

    Preloader.prototype = {
        loadResources: function() {
            window.path='./assets/img/f5.jpg';
            this.load.image('pic', window.path);
            this.load.start();

        },
        drawPieProgress: function(_progress) {
            var that = this;
            that.pgGraphics.clear();
            that.pgGraphics.lineStyle(6, 0x29ABE2);
            that.pgGraphics.arc(this.game.width / 2, 182 + 140, 45, this.game.math.degToRad(270), this.game.math.degToRad(360 * _progress / 100 + 270), false);
            that.pgGraphics.endFill();

        },
        create: function() {
            var that = this;
            that.pgGraphics = this.add.graphics(0, 0);

            this.load.onFileComplete.add(that.onfileComplete, this);
            this.load.onLoadComplete.addOnce(that.onLoadComplete, this);
            this.loadResources();

        },
        onLoadComplete: function() {
            var that = this;
            that.game.state.start('State1');
            return;

        },
        onfileComplete: function(progress, cacheKey, success, totalLoaded, totalFiles) {
            var that = this;
            that.drawPieProgress(progress);
        }
    };

}());
},{}],"/Users/sanchez/Work/test/pixelface/src/assets/js/states/state1.js":[function(require,module,exports){
/**
 * Created by sanchez
 */
(function() {
    'use strict';
    var State1 = function() {};
    module.exports = State1;
    State1.prototype = {
        gps: [],
        timelines: [],
        _map: function(t, e, r, o, n) {
            return (t - e) / (r - e) * (n - o) + o;
        },
        pressed: false,
        eventInit: function() {
            this.input.onDown.add(this.tap, this);
            this.input.onUp.add(this.release, this);
            this.input.addMoveCallback(this.drag, this);
        },
        release: function() {
            var that = this;
            that.pressed = false;

        },
        drag: function(pointer, x, y) {
            var that = this;
            var xm, ym;

            if (that.pressed) {
                that.tapCirc.x = x;
                that.tapCirc.y = y;
                for (var i = that.gps.length - 1; i >= 0; i--) {

                    if (that.gps[i] === null) {
                        continue;
                    }
                    if (that.tapCirc.contains(that.gps[i].x, that.gps[i].y)) {

                        if (that.gps[i].x > pointer.clientX) {
                            xm = '+=10';
                        } else {
                            xm = '-=10';
                        }
                        if (that.gps[i].y > pointer.clientY) {
                            ym = '+=10';
                        } else {
                            ym = '-=10';
                        }
                        (function(num) {
                            var gpgo = that.gps[num];
                            that.gps[num] = null;
                            TweenMax.to(gpgo, 0.5, {
                                repeat: 1,
                                yoyo: true,
                                y: ym,
                                x: xm,
                                alpha: 0,
                                ease: Circ.easeOut,
                                delay: that.rnd.realInRange(0, 1),
                                onComplete: function() {
                                    that.gps[num] = gpgo;
                                }
                            });
                        })(i);

                    }
                }


            }

        },

        tap: function(pointer) {
            var that = this;


            that.pressed = true;
            that.tapCirc = new Phaser.Circle(pointer.clientX, pointer.clientY, 50 * that.rnd.realInRange(1, 1.5));

        },
        drawLine: function(t, e, w, color) {
            var that = this;
            t = t + that.rnd.realInRange(-1, 1);
            e = e + that.rnd.realInRange(-1, 1);
            var gp = that.add.graphics(t, 0);
            gp.lineStyle(w, color, 1);
            gp.moveTo(0, 0);
            gp.lineTo(8, 8);
            gp.endFill();
            that.gps.push(gp);
            gp.alpha = 0;
            var tl = TweenMax.to(gp, 0.5, { y: e, alpha: 1, ease: Strong.easeOut, delay: that.rnd.realInRange(0, 2) });
            // t.pause();
            that.timelines.push(tl);

        },
        drawCirc: function(t, e, w, color) {
            var that = this;
            var gp = that.add.graphics(t, 0);
            that.gps.push(gp);
            gp.lineStyle(0);

            // color=0x000;
            if (w <= 4) {
                t = t + that.rnd.realInRange(-3, 3);
                e = e + that.rnd.realInRange(-3, 3);

                // w = w * that.rnd.realInRange(4, 4);

                // w = 0;
                // color = 0xE6D2C9;

            } else {
                t = t + that.rnd.realInRange(-1, 1);
                e = e + that.rnd.realInRange(-1, 1);
            }


            gp.beginFill(color, 1);

            gp.drawCircle(0, 0, w);

            gp.endFill();
            gp.alpha = 0;
            var tl = TweenMax.to(gp, 0.5, { y: e, alpha: 1, ease: Strong.easeOut, delay: that.rnd.realInRange(0, 2) });
            // t.pause();
            that.timelines.push(tl);



        },
        preload: function() {},


        plot: function(x, y, w, h) {
            var rect = this.add.graphics(x, y);
            rect.lineStyle(2, 0xa64ceb, 2);
            rect.drawRect(w * 0.1, 0, w * 0.8, h);
            rect.endFill();

        },
        facepixel: function(x, y, w, h) {
            var that = this;
            var posXF, posYF;

            var area = new Phaser.Rectangle(Math.ceil(x + w * 0.1), y, Math.floor(w * 0.9), h);
            var facebmd = that.make.bitmapData();
            // bmd.addToWorld();
            facebmd.copyRect('pic', area, 0, 0);
            var mg = this.add.image(20 - Math.sqrt(8), that.bmd.height + 10, facebmd);
            mg.scale.setTo(2);
            mg.alpha = 0;
            var w1;
            for (var gridX = Math.ceil(x + w * 0.1); gridX < Math.floor(x + w * 0.9);) {
                for (var gridY = y; gridY < y + h;) {
                    var posX = 2 * gridX;
                    var posY = 2 * gridY;
                    if (posXF == null) {
                        posXF = posX;
                        posYF = posY;
                    }
                    var color = that.bmd.getPixelRGB(gridX, gridY);
                    // console.log(color);
                    var greyscale = Math.round(color.r * 0.222 + color.g * 0.707 + color.b * 0.071);
                    w1 = this._map(greyscale, 0, 255, 15, 0.1);
                    var color16 = ('0' + color.r.toString(16)).slice(-2) + ('0' + color.g.toString(16)).slice(-2) + ('0' + color.b.toString(16)).slice(-2);
                    // console.log(parseInt(color16, 16));

                    if (w1 < 7) {
                        w1 *= 2;
                        gridY += 4;
                    } else {
                        gridY += 2;
                    }
                    //drawCic
                    // this.drawCirc(posX - posXF + 20, posY - posYF + that.bmd.height + 10, w1, parseInt(color16, 16));

                    //drawLine
                    this.drawLine(posX - posXF + 20, posY - posYF + that.bmd.height + 10, w1, parseInt(color16, 16));
                }
                if (w1 < 7) {
                    gridX += 4;
                } else {
                    gridX += 2;
                }
            }


        },
        create: function() {
            var that = this;
            that.bmd = this.make.bitmapData();
            that.bmd.load('pic');
            that.bmd.addToWorld();


            var area = new Phaser.Rectangle(0, 0, that.bmd.width, that.bmd.height);
            var tracker = new tracking.ObjectTracker(['face']);
            var picImg = new Image();
            picImg.src = window.path;
            tracker.on('track', function(event) {
                if (event.data.length === 0) {
                    // No objects were detected in this frame.
                    console.log('no face');
                } else {
                    console.log('get first face');

                    that.plot(event.data[0].x, event.data[0].y, event.data[0].height, event.data[0].width);
                    that.facepixel(event.data[0].x, event.data[0].y, event.data[0].height, event.data[0].width);

                }
            });
            picImg.onload = function() {

                tracking.track(picImg, tracker);
                tracker.setStepSize(1.7);
            };

            that.eventInit();

        },


        update: function() {}

    };

}());
},{}]},{},["/Users/sanchez/Work/test/pixelface/src/assets/js/main.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvYXNzZXRzL2pzL21haW4uanMiLCJzcmMvYXNzZXRzL2pzL3N0YXRlcy9ib290LmpzIiwic3JjL2Fzc2V0cy9qcy9zdGF0ZXMvcHJlbG9hZGVyLmpzIiwic3JjL2Fzc2V0cy9qcy9zdGF0ZXMvc3RhdGUxLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8qKlxuICogQ3JlYXRlZCBieSBzYW5jaGV6IFxuICovXG4ndXNlIHN0cmljdCc7XG53aW5kb3cuZ2FtZSA9IG5ldyBQaGFzZXIuR2FtZSgnMTAwJywgJzEwMCcsIFBoYXNlci5DQU5WQVMsICdteWNhbnZhcycsIG51bGwsIHRydWUpO1xud2luZG93LmdhbWUuc3RhdGUuYWRkKCdCb290JywgcmVxdWlyZSgnLi9zdGF0ZXMvYm9vdCcpKTtcbndpbmRvdy5nYW1lLnN0YXRlLmFkZCgnUHJlbG9hZGVyJywgcmVxdWlyZSgnLi9zdGF0ZXMvcHJlbG9hZGVyJykpO1xud2luZG93LmdhbWUuc3RhdGUuYWRkKCdTdGF0ZTEnLCByZXF1aXJlKCcuL3N0YXRlcy9zdGF0ZTEnKSk7XG53aW5kb3cuZ2FtZS5zdGF0ZS5zdGFydCgnQm9vdCcpO1xuZnVuY3Rpb24gc2hvd1N0YXRzKCkge1xuICAgIHZhciBzdGF0cyA9IG5ldyBTdGF0cygpO1xuICAgIHN0YXRzLnNob3dQYW5lbCgwKTsgLy8gMDogZnBzLCAxOiBtcywgMjogbWIsIDMrOiBjdXN0b21cbiAgICB2YXIgZnMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBmcy5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgZnMuc3R5bGUubGVmdCA9IDA7XG4gICAgZnMuc3R5bGUudG9wID0gMDtcbiAgICBmcy5zdHlsZS56SW5kZXggPSA5OTk7XG4gICAgZnMuYXBwZW5kQ2hpbGQoc3RhdHMuZG9tRWxlbWVudCk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmcyk7XG5cbiAgICBmdW5jdGlvbiBhbmltYXRlKCkge1xuICAgICAgICBzdGF0cy5iZWdpbigpO1xuICAgICAgICAvLyBtb25pdG9yZWQgY29kZSBnb2VzIGhlcmVcbiAgICAgICAgc3RhdHMuZW5kKCk7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcbiAgICB9XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpO1xufVxuc2hvd1N0YXRzKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIEJvb3QgPSBmdW5jdGlvbigpIHt9O1xuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBCb290O1xuXG4gICAgQm9vdC5wcm90b3R5cGUgPSB7XG4gICAgICAgIHByZWxvYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gdGhpcy5sb2FkLmltYWdlKCdsb2FkX2kxJywgJ2Fzc2V0cy9pbWcvcDEvbG9hZF9pMS5wbmcnKTtcbiAgICAgICAgICAgIC8vIHZhciBsc0RhdGEzID0ge1xuICAgICAgICAgICAgLy8gICAgICdmcmFtZXMnOiBbXG5cbiAgICAgICAgICAgIC8vICAgICAgICAge1xuICAgICAgICAgICAgLy8gICAgICAgICAgICAgJ2ZpbGVuYW1lJzogJ2xvYWRpbmcgdG91Y2hfMDAwMDAucG5nJyxcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICdmcmFtZSc6IHsgJ3gnOiAxLCAneSc6IDEsICd3JzogMjA0LCAnaCc6IDMwIH0sXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAncm90YXRlZCc6IGZhbHNlLFxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgJ3RyaW1tZWQnOiB0cnVlLFxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgJ3Nwcml0ZVNvdXJjZVNpemUnOiB7ICd4JzogNTY1LCAneSc6IDEyNiwgJ3cnOiAyMDQsICdoJzogMzAgfSxcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICdzb3VyY2VTaXplJzogeyAndyc6IDEzMzQsICdoJzogMzA4IH1cbiAgICAgICAgICAgIC8vICAgICAgICAgfSwge1xuICAgICAgICAgICAgLy8gICAgICAgICAgICAgJ2ZpbGVuYW1lJzogJ2xvYWRpbmcgdG91Y2hfMDAwMDEucG5nJyxcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICdmcmFtZSc6IHsgJ3gnOiAxLCAneSc6IDMzLCAndyc6IDIwNCwgJ2gnOiAzMCB9LFxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgJ3JvdGF0ZWQnOiBmYWxzZSxcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICd0cmltbWVkJzogdHJ1ZSxcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICdzcHJpdGVTb3VyY2VTaXplJzogeyAneCc6IDU2NSwgJ3knOiAxMjYsICd3JzogMjA0LCAnaCc6IDMwIH0sXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAnc291cmNlU2l6ZSc6IHsgJ3cnOiAxMzM0LCAnaCc6IDMwOCB9XG4gICAgICAgICAgICAvLyAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICdmaWxlbmFtZSc6ICdsb2FkaW5nIHRvdWNoXzAwMDAyLnBuZycsXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAnZnJhbWUnOiB7ICd4JzogMTUzLCAneSc6IDczOSwgJ3cnOiAxOTQsICdoJzogODQgfSxcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICdyb3RhdGVkJzogZmFsc2UsXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAndHJpbW1lZCc6IHRydWUsXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAnc3ByaXRlU291cmNlU2l6ZSc6IHsgJ3gnOiA1NzAsICd5JzogOTksICd3JzogMTk0LCAnaCc6IDg0IH0sXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAnc291cmNlU2l6ZSc6IHsgJ3cnOiAxMzM0LCAnaCc6IDMwOCB9XG4gICAgICAgICAgICAvLyAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICdmaWxlbmFtZSc6ICdsb2FkaW5nIHRvdWNoXzAwMDAzLnBuZycsXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAnZnJhbWUnOiB7ICd4JzogMTk5LCAneSc6IDM4MSwgJ3cnOiAxNzAsICdoJzogMTc4IH0sXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAncm90YXRlZCc6IGZhbHNlLFxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgJ3RyaW1tZWQnOiB0cnVlLFxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgJ3Nwcml0ZVNvdXJjZVNpemUnOiB7ICd4JzogNTgyLCAneSc6IDUyLCAndyc6IDE3MCwgJ2gnOiAxNzggfSxcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICdzb3VyY2VTaXplJzogeyAndyc6IDEzMzQsICdoJzogMzA4IH1cbiAgICAgICAgICAgIC8vICAgICAgICAgfSwge1xuICAgICAgICAgICAgLy8gICAgICAgICAgICAgJ2ZpbGVuYW1lJzogJ2xvYWRpbmcgdG91Y2hfMDAwMDQucG5nJyxcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICdmcmFtZSc6IHsgJ3gnOiAxLCAneSc6IDU5NywgJ3cnOiAxNTAsICdoJzogMTk2IH0sXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAncm90YXRlZCc6IGZhbHNlLFxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgJ3RyaW1tZWQnOiB0cnVlLFxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgJ3Nwcml0ZVNvdXJjZVNpemUnOiB7ICd4JzogNTkyLCAneSc6IDQzLCAndyc6IDE1MCwgJ2gnOiAxOTYgfSxcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICdzb3VyY2VTaXplJzogeyAndyc6IDEzMzQsICdoJzogMzA4IH1cbiAgICAgICAgICAgIC8vICAgICAgICAgfSwge1xuICAgICAgICAgICAgLy8gICAgICAgICAgICAgJ2ZpbGVuYW1lJzogJ2xvYWRpbmcgdG91Y2hfMDAwMDUucG5nJyxcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICdmcmFtZSc6IHsgJ3gnOiAxNTMsICd5JzogNTk3LCAndyc6IDE5NiwgJ2gnOiAxNDAgfSxcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICdyb3RhdGVkJzogZmFsc2UsXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAndHJpbW1lZCc6IHRydWUsXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAnc3ByaXRlU291cmNlU2l6ZSc6IHsgJ3gnOiA1NjksICd5JzogNzEsICd3JzogMTk2LCAnaCc6IDE0MCB9LFxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgJ3NvdXJjZVNpemUnOiB7ICd3JzogMTMzNCwgJ2gnOiAzMDggfVxuICAgICAgICAgICAgLy8gICAgICAgICB9LCB7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAnZmlsZW5hbWUnOiAnbG9hZGluZyB0b3VjaF8wMDAwNi5wbmcnLFxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgJ2ZyYW1lJzogeyAneCc6IDEsICd5JzogMTkzLCAndyc6IDE5NiwgJ2gnOiAyMDQgfSxcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICdyb3RhdGVkJzogZmFsc2UsXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAndHJpbW1lZCc6IHRydWUsXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAnc3ByaXRlU291cmNlU2l6ZSc6IHsgJ3gnOiA1NjksICd5JzogMzksICd3JzogMTk2LCAnaCc6IDIwNCB9LFxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgJ3NvdXJjZVNpemUnOiB7ICd3JzogMTMzNCwgJ2gnOiAzMDggfVxuICAgICAgICAgICAgLy8gICAgICAgICB9LCB7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAnZmlsZW5hbWUnOiAnbG9hZGluZyB0b3VjaF8wMDAwNy5wbmcnLFxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgJ2ZyYW1lJzogeyAneCc6IDEsICd5JzogMzk5LCAndyc6IDE5NiwgJ2gnOiAxOTYgfSxcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICdyb3RhdGVkJzogZmFsc2UsXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAndHJpbW1lZCc6IHRydWUsXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAnc3ByaXRlU291cmNlU2l6ZSc6IHsgJ3gnOiA1NjksICd5JzogNDMsICd3JzogMTk2LCAnaCc6IDE5NiB9LFxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgJ3NvdXJjZVNpemUnOiB7ICd3JzogMTMzNCwgJ2gnOiAzMDggfVxuICAgICAgICAgICAgLy8gICAgICAgICB9LCB7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAnZmlsZW5hbWUnOiAnbG9hZGluZyB0b3VjaF8wMDAwOC5wbmcnLFxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgJ2ZyYW1lJzogeyAneCc6IDIwNywgJ3knOiAxLCAndyc6IDE3NiwgJ2gnOiAxOTYgfSxcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICdyb3RhdGVkJzogZmFsc2UsXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAndHJpbW1lZCc6IHRydWUsXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAnc3ByaXRlU291cmNlU2l6ZSc6IHsgJ3gnOiA1NzksICd5JzogNDMsICd3JzogMTc2LCAnaCc6IDE5NiB9LFxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgJ3NvdXJjZVNpemUnOiB7ICd3JzogMTMzNCwgJ2gnOiAzMDggfVxuICAgICAgICAgICAgLy8gICAgICAgICB9LCB7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAnZmlsZW5hbWUnOiAnbG9hZGluZyB0b3VjaF8wMDAwOS5wbmcnLFxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgJ2ZyYW1lJzogeyAneCc6IDE5OSwgJ3knOiAxOTksICd3JzogMTkyLCAnaCc6IDE4MCB9LFxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgJ3JvdGF0ZWQnOiBmYWxzZSxcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICd0cmltbWVkJzogdHJ1ZSxcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICdzcHJpdGVTb3VyY2VTaXplJzogeyAneCc6IDU3MSwgJ3knOiA1MSwgJ3cnOiAxOTIsICdoJzogMTgwIH0sXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAnc291cmNlU2l6ZSc6IHsgJ3cnOiAxMzM0LCAnaCc6IDMwOCB9XG4gICAgICAgICAgICAvLyAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICdmaWxlbmFtZSc6ICdsb2FkaW5nIHRvdWNoXzAwMDEwLnBuZycsXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAnZnJhbWUnOiB7ICd4JzogMSwgJ3knOiAxMDEsICd3JzogMjAwLCAnaCc6IDkwIH0sXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAncm90YXRlZCc6IGZhbHNlLFxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgJ3RyaW1tZWQnOiB0cnVlLFxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgJ3Nwcml0ZVNvdXJjZVNpemUnOiB7ICd4JzogNTY3LCAneSc6IDk2LCAndyc6IDIwMCwgJ2gnOiA5MCB9LFxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgJ3NvdXJjZVNpemUnOiB7ICd3JzogMTMzNCwgJ2gnOiAzMDggfVxuICAgICAgICAgICAgLy8gICAgICAgICB9LCB7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAnZmlsZW5hbWUnOiAnbG9hZGluZyB0b3VjaF8wMDAxMS5wbmcnLFxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgJ2ZyYW1lJzogeyAneCc6IDEsICd5JzogNjUsICd3JzogMjAyLCAnaCc6IDM0IH0sXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAncm90YXRlZCc6IGZhbHNlLFxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgJ3RyaW1tZWQnOiB0cnVlLFxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgJ3Nwcml0ZVNvdXJjZVNpemUnOiB7ICd4JzogNTY2LCAneSc6IDEyNCwgJ3cnOiAyMDIsICdoJzogMzQgfSxcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICdzb3VyY2VTaXplJzogeyAndyc6IDEzMzQsICdoJzogMzA4IH1cbiAgICAgICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAgICAgLy8gICAgIF0sXG4gICAgICAgICAgICAvLyAgICAgJ21ldGEnOiB7XG4gICAgICAgICAgICAvLyAgICAgICAgICdhcHAnOiAnaHR0cDovL3d3dy5jb2RlYW5kd2ViLmNvbS90ZXh0dXJlcGFja2VyJyxcbiAgICAgICAgICAgIC8vICAgICAgICAgJ3ZlcnNpb24nOiAnMS4wJyxcbiAgICAgICAgICAgIC8vICAgICAgICAgJ2ltYWdlJzogJ2xvYWRfc3ByaXRlMy5wbmcnLFxuICAgICAgICAgICAgLy8gICAgICAgICAnZm9ybWF0JzogJ1JHQkE4ODg4JyxcbiAgICAgICAgICAgIC8vICAgICAgICAgJ3NpemUnOiB7ICd3JzogMzkyLCAnaCc6IDgyNCB9LFxuICAgICAgICAgICAgLy8gICAgICAgICAnc2NhbGUnOiAnMScsXG4gICAgICAgICAgICAvLyAgICAgICAgICdzbWFydHVwZGF0ZSc6ICckVGV4dHVyZVBhY2tlcjpTbWFydFVwZGF0ZToyNjJiNzM5M2E2YWI3NmFhOTU5YWNlZjU5MzZiYTY1YjphY2M5ZGM1ZjI2MTIwZjMyZTllMTU3YTE3NGMxYWJkZTowZjIyOTk3OGY3NTgxOWZkMTY5M2NkMDlmYzUwZDM2NiQnXG4gICAgICAgICAgICAvLyAgICAgfVxuICAgICAgICAgICAgLy8gfTtcbiAgICAgICAgICAgIC8vIHRoaXMubG9hZC5hdGxhc0pTT05BcnJheSgnbG9hZF9zcHJpdGUzJywgJ2Fzc2V0cy9pbWcvcDEvbG9hZF9zcHJpdGUzLnBuZycsIG51bGwsIGxzRGF0YTMpO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIC8vIGNvbmZpZ3VyZSBnYW1lXG4gICAgICAgICAgICB0aGlzLmdhbWUuaW5wdXQubWF4UG9pbnRlcnMgPSAxO1xuICAgICAgICAgICAgdGhpcy5zY2FsZS5zY2FsZU1vZGUgPSBQaGFzZXIuU2NhbGVNYW5hZ2VyLlNIT1dfQUxMO1xuICAgICAgICAgICAgLy8gdGhpcy5zY2FsZS5zY2FsZU1vZGUgPSBQaGFzZXIuU2NhbGVNYW5hZ2VyLlVTRVJfU0NBTEU7XG4gICAgICAgICAgICB0aGlzLnNjYWxlLnBhZ2VBbGlnbkhvcml6b250YWxseSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnNjYWxlLnBhZ2VBbGlnblZlcnRpY2FsbHkgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5zdGFnZS5kaXNhYmxlVmlzaWJpbGl0eUNoYW5nZSA9IHRydWU7XG5cbiAgICAgICAgICAgIC8vIHRoaXMuc2NhbGUuc2V0VXNlclNjYWxlKHdpbmRvdy5pbm5lcldpZHRoIC8gNzUwLCB3aW5kb3cuaW5uZXJXaWR0aCAvIDc1MCwgMCwgMCk7XG4gICAgICAgICAgICAvLyBpZiAodGhpcy5nYW1lLmRldmljZS5kZXNrdG9wKSB7XG4gICAgICAgICAgICAvLyAgICAgdGhpcy5nYW1lLnNjYWxlLnBhZ2VBbGlnbkhvcml6b250YWxseSA9IHRydWU7XG4gICAgICAgICAgICAvLyB9IGVsc2Uge1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyAgICAgaWYoIXdpbmRvdy5hbmRyb2lkKXtcbiAgICAgICAgICAgIC8vICAgICAgICAgdGhpcy5zY2FsZS5zY2FsZU1vZGUgPSBQaGFzZXIuU2NhbGVNYW5hZ2VyLlNIT1dfQUxMO1xuICAgICAgICAgICAgLy8gICAgICAgICAvLyB0aGlzLnNjYWxlLnBhZ2VBbGlnbkhvcml6b250YWxseSA9IHRydWU7XG4gICAgICAgICAgICAvLyAgICAgICAgIC8vIHRoaXMuc2NhbGUucGFnZUFsaWduVmVydGljYWxseSA9IHRydWU7XG4gICAgICAgICAgICAvLyAgICAgfWVsc2Uge1xuICAgICAgICAgICAgLy8gICAgICAgICB0aGlzLnNjYWxlLnNjYWxlTW9kZSA9IFBoYXNlci5TY2FsZU1hbmFnZXIuVVNFUl9TQ0FMRTtcbiAgICAgICAgICAgIC8vICAgICAgICAgdGhpcy5zY2FsZS5zZXRVc2VyU2NhbGUod2luZG93LmlubmVyV2lkdGgvNzUwLHdpbmRvdy5pbm5lcldpZHRoLzc1MCwwLDApO1xuICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gICAgIC8vICQoJyNiYWJ5c2lyaS1nYW1lJykuZmluZCgnY2FudmFzJykuY3NzKCdib3R0b20nLCcwJyk7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICB0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ1ByZWxvYWRlcicpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG59KCkpO1xuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHNhbmNoZXogb24gMTcvNS8yMi5cbiAqL1xuKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgUHJlbG9hZGVyID0gZnVuY3Rpb24oKSB7fTtcblxuICAgIG1vZHVsZS5leHBvcnRzID0gUHJlbG9hZGVyO1xuXG4gICAgUHJlbG9hZGVyLnByb3RvdHlwZSA9IHtcbiAgICAgICAgbG9hZFJlc291cmNlczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB3aW5kb3cucGF0aD0nLi9hc3NldHMvaW1nL2Y1LmpwZyc7XG4gICAgICAgICAgICB0aGlzLmxvYWQuaW1hZ2UoJ3BpYycsIHdpbmRvdy5wYXRoKTtcbiAgICAgICAgICAgIHRoaXMubG9hZC5zdGFydCgpO1xuXG4gICAgICAgIH0sXG4gICAgICAgIGRyYXdQaWVQcm9ncmVzczogZnVuY3Rpb24oX3Byb2dyZXNzKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB0aGF0LnBnR3JhcGhpY3MuY2xlYXIoKTtcbiAgICAgICAgICAgIHRoYXQucGdHcmFwaGljcy5saW5lU3R5bGUoNiwgMHgyOUFCRTIpO1xuICAgICAgICAgICAgdGhhdC5wZ0dyYXBoaWNzLmFyYyh0aGlzLmdhbWUud2lkdGggLyAyLCAxODIgKyAxNDAsIDQ1LCB0aGlzLmdhbWUubWF0aC5kZWdUb1JhZCgyNzApLCB0aGlzLmdhbWUubWF0aC5kZWdUb1JhZCgzNjAgKiBfcHJvZ3Jlc3MgLyAxMDAgKyAyNzApLCBmYWxzZSk7XG4gICAgICAgICAgICB0aGF0LnBnR3JhcGhpY3MuZW5kRmlsbCgpO1xuXG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB0aGF0LnBnR3JhcGhpY3MgPSB0aGlzLmFkZC5ncmFwaGljcygwLCAwKTtcblxuICAgICAgICAgICAgdGhpcy5sb2FkLm9uRmlsZUNvbXBsZXRlLmFkZCh0aGF0Lm9uZmlsZUNvbXBsZXRlLCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMubG9hZC5vbkxvYWRDb21wbGV0ZS5hZGRPbmNlKHRoYXQub25Mb2FkQ29tcGxldGUsIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5sb2FkUmVzb3VyY2VzKCk7XG5cbiAgICAgICAgfSxcbiAgICAgICAgb25Mb2FkQ29tcGxldGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdGhhdC5nYW1lLnN0YXRlLnN0YXJ0KCdTdGF0ZTEnKTtcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICB9LFxuICAgICAgICBvbmZpbGVDb21wbGV0ZTogZnVuY3Rpb24ocHJvZ3Jlc3MsIGNhY2hlS2V5LCBzdWNjZXNzLCB0b3RhbExvYWRlZCwgdG90YWxGaWxlcykge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdGhhdC5kcmF3UGllUHJvZ3Jlc3MocHJvZ3Jlc3MpO1xuICAgICAgICB9XG4gICAgfTtcblxufSgpKTsiLCIvKipcbiAqIENyZWF0ZWQgYnkgc2FuY2hlelxuICovXG4oZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBTdGF0ZTEgPSBmdW5jdGlvbigpIHt9O1xuICAgIG1vZHVsZS5leHBvcnRzID0gU3RhdGUxO1xuICAgIFN0YXRlMS5wcm90b3R5cGUgPSB7XG4gICAgICAgIGdwczogW10sXG4gICAgICAgIHRpbWVsaW5lczogW10sXG4gICAgICAgIF9tYXA6IGZ1bmN0aW9uKHQsIGUsIHIsIG8sIG4pIHtcbiAgICAgICAgICAgIHJldHVybiAodCAtIGUpIC8gKHIgLSBlKSAqIChuIC0gbykgKyBvO1xuICAgICAgICB9LFxuICAgICAgICBwcmVzc2VkOiBmYWxzZSxcbiAgICAgICAgZXZlbnRJbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuaW5wdXQub25Eb3duLmFkZCh0aGlzLnRhcCwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLmlucHV0Lm9uVXAuYWRkKHRoaXMucmVsZWFzZSwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLmlucHV0LmFkZE1vdmVDYWxsYmFjayh0aGlzLmRyYWcsIHRoaXMpO1xuICAgICAgICB9LFxuICAgICAgICByZWxlYXNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHRoYXQucHJlc3NlZCA9IGZhbHNlO1xuXG4gICAgICAgIH0sXG4gICAgICAgIGRyYWc6IGZ1bmN0aW9uKHBvaW50ZXIsIHgsIHkpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHZhciB4bSwgeW07XG5cbiAgICAgICAgICAgIGlmICh0aGF0LnByZXNzZWQpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnRhcENpcmMueCA9IHg7XG4gICAgICAgICAgICAgICAgdGhhdC50YXBDaXJjLnkgPSB5O1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSB0aGF0Lmdwcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGF0Lmdwc1tpXSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoYXQudGFwQ2lyYy5jb250YWlucyh0aGF0Lmdwc1tpXS54LCB0aGF0Lmdwc1tpXS55KSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhhdC5ncHNbaV0ueCA+IHBvaW50ZXIuY2xpZW50WCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtID0gJys9MTAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bSA9ICctPTEwJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGF0Lmdwc1tpXS55ID4gcG9pbnRlci5jbGllbnRZKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeW0gPSAnKz0xMCc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHltID0gJy09MTAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uKG51bSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBncGdvID0gdGhhdC5ncHNbbnVtXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0Lmdwc1tudW1dID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUd2Vlbk1heC50byhncGdvLCAwLjUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwZWF0OiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3lvOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiB5bSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogeG0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFscGhhOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYXNlOiBDaXJjLmVhc2VPdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5OiB0aGF0LnJuZC5yZWFsSW5SYW5nZSgwLCAxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0Lmdwc1tudW1dID0gZ3BnbztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkoaSk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICB0YXA6IGZ1bmN0aW9uKHBvaW50ZXIpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuXG4gICAgICAgICAgICB0aGF0LnByZXNzZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhhdC50YXBDaXJjID0gbmV3IFBoYXNlci5DaXJjbGUocG9pbnRlci5jbGllbnRYLCBwb2ludGVyLmNsaWVudFksIDUwICogdGhhdC5ybmQucmVhbEluUmFuZ2UoMSwgMS41KSk7XG5cbiAgICAgICAgfSxcbiAgICAgICAgZHJhd0xpbmU6IGZ1bmN0aW9uKHQsIGUsIHcsIGNvbG9yKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB0ID0gdCArIHRoYXQucm5kLnJlYWxJblJhbmdlKC0xLCAxKTtcbiAgICAgICAgICAgIGUgPSBlICsgdGhhdC5ybmQucmVhbEluUmFuZ2UoLTEsIDEpO1xuICAgICAgICAgICAgdmFyIGdwID0gdGhhdC5hZGQuZ3JhcGhpY3ModCwgMCk7XG4gICAgICAgICAgICBncC5saW5lU3R5bGUodywgY29sb3IsIDEpO1xuICAgICAgICAgICAgZ3AubW92ZVRvKDAsIDApO1xuICAgICAgICAgICAgZ3AubGluZVRvKDgsIDgpO1xuICAgICAgICAgICAgZ3AuZW5kRmlsbCgpO1xuICAgICAgICAgICAgdGhhdC5ncHMucHVzaChncCk7XG4gICAgICAgICAgICBncC5hbHBoYSA9IDA7XG4gICAgICAgICAgICB2YXIgdGwgPSBUd2Vlbk1heC50byhncCwgMC41LCB7IHk6IGUsIGFscGhhOiAxLCBlYXNlOiBTdHJvbmcuZWFzZU91dCwgZGVsYXk6IHRoYXQucm5kLnJlYWxJblJhbmdlKDAsIDIpIH0pO1xuICAgICAgICAgICAgLy8gdC5wYXVzZSgpO1xuICAgICAgICAgICAgdGhhdC50aW1lbGluZXMucHVzaCh0bCk7XG5cbiAgICAgICAgfSxcbiAgICAgICAgZHJhd0NpcmM6IGZ1bmN0aW9uKHQsIGUsIHcsIGNvbG9yKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgZ3AgPSB0aGF0LmFkZC5ncmFwaGljcyh0LCAwKTtcbiAgICAgICAgICAgIHRoYXQuZ3BzLnB1c2goZ3ApO1xuICAgICAgICAgICAgZ3AubGluZVN0eWxlKDApO1xuXG4gICAgICAgICAgICAvLyBjb2xvcj0weDAwMDtcbiAgICAgICAgICAgIGlmICh3IDw9IDQpIHtcbiAgICAgICAgICAgICAgICB0ID0gdCArIHRoYXQucm5kLnJlYWxJblJhbmdlKC0zLCAzKTtcbiAgICAgICAgICAgICAgICBlID0gZSArIHRoYXQucm5kLnJlYWxJblJhbmdlKC0zLCAzKTtcblxuICAgICAgICAgICAgICAgIC8vIHcgPSB3ICogdGhhdC5ybmQucmVhbEluUmFuZ2UoNCwgNCk7XG5cbiAgICAgICAgICAgICAgICAvLyB3ID0gMDtcbiAgICAgICAgICAgICAgICAvLyBjb2xvciA9IDB4RTZEMkM5O1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHQgPSB0ICsgdGhhdC5ybmQucmVhbEluUmFuZ2UoLTEsIDEpO1xuICAgICAgICAgICAgICAgIGUgPSBlICsgdGhhdC5ybmQucmVhbEluUmFuZ2UoLTEsIDEpO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIGdwLmJlZ2luRmlsbChjb2xvciwgMSk7XG5cbiAgICAgICAgICAgIGdwLmRyYXdDaXJjbGUoMCwgMCwgdyk7XG5cbiAgICAgICAgICAgIGdwLmVuZEZpbGwoKTtcbiAgICAgICAgICAgIGdwLmFscGhhID0gMDtcbiAgICAgICAgICAgIHZhciB0bCA9IFR3ZWVuTWF4LnRvKGdwLCAwLjUsIHsgeTogZSwgYWxwaGE6IDEsIGVhc2U6IFN0cm9uZy5lYXNlT3V0LCBkZWxheTogdGhhdC5ybmQucmVhbEluUmFuZ2UoMCwgMikgfSk7XG4gICAgICAgICAgICAvLyB0LnBhdXNlKCk7XG4gICAgICAgICAgICB0aGF0LnRpbWVsaW5lcy5wdXNoKHRsKTtcblxuXG5cbiAgICAgICAgfSxcbiAgICAgICAgcHJlbG9hZDogZnVuY3Rpb24oKSB7fSxcblxuXG4gICAgICAgIHBsb3Q6IGZ1bmN0aW9uKHgsIHksIHcsIGgpIHtcbiAgICAgICAgICAgIHZhciByZWN0ID0gdGhpcy5hZGQuZ3JhcGhpY3MoeCwgeSk7XG4gICAgICAgICAgICByZWN0LmxpbmVTdHlsZSgyLCAweGE2NGNlYiwgMik7XG4gICAgICAgICAgICByZWN0LmRyYXdSZWN0KHcgKiAwLjEsIDAsIHcgKiAwLjgsIGgpO1xuICAgICAgICAgICAgcmVjdC5lbmRGaWxsKCk7XG5cbiAgICAgICAgfSxcbiAgICAgICAgZmFjZXBpeGVsOiBmdW5jdGlvbih4LCB5LCB3LCBoKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgcG9zWEYsIHBvc1lGO1xuXG4gICAgICAgICAgICB2YXIgYXJlYSA9IG5ldyBQaGFzZXIuUmVjdGFuZ2xlKE1hdGguY2VpbCh4ICsgdyAqIDAuMSksIHksIE1hdGguZmxvb3IodyAqIDAuOSksIGgpO1xuICAgICAgICAgICAgdmFyIGZhY2VibWQgPSB0aGF0Lm1ha2UuYml0bWFwRGF0YSgpO1xuICAgICAgICAgICAgLy8gYm1kLmFkZFRvV29ybGQoKTtcbiAgICAgICAgICAgIGZhY2VibWQuY29weVJlY3QoJ3BpYycsIGFyZWEsIDAsIDApO1xuICAgICAgICAgICAgdmFyIG1nID0gdGhpcy5hZGQuaW1hZ2UoMjAgLSBNYXRoLnNxcnQoOCksIHRoYXQuYm1kLmhlaWdodCArIDEwLCBmYWNlYm1kKTtcbiAgICAgICAgICAgIG1nLnNjYWxlLnNldFRvKDIpO1xuICAgICAgICAgICAgbWcuYWxwaGEgPSAwO1xuICAgICAgICAgICAgdmFyIHcxO1xuICAgICAgICAgICAgZm9yICh2YXIgZ3JpZFggPSBNYXRoLmNlaWwoeCArIHcgKiAwLjEpOyBncmlkWCA8IE1hdGguZmxvb3IoeCArIHcgKiAwLjkpOykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGdyaWRZID0geTsgZ3JpZFkgPCB5ICsgaDspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvc1ggPSAyICogZ3JpZFg7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3NZID0gMiAqIGdyaWRZO1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9zWEYgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zWEYgPSBwb3NYO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zWUYgPSBwb3NZO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2xvciA9IHRoYXQuYm1kLmdldFBpeGVsUkdCKGdyaWRYLCBncmlkWSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdyZXlzY2FsZSA9IE1hdGgucm91bmQoY29sb3IuciAqIDAuMjIyICsgY29sb3IuZyAqIDAuNzA3ICsgY29sb3IuYiAqIDAuMDcxKTtcbiAgICAgICAgICAgICAgICAgICAgdzEgPSB0aGlzLl9tYXAoZ3JleXNjYWxlLCAwLCAyNTUsIDE1LCAwLjEpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29sb3IxNiA9ICgnMCcgKyBjb2xvci5yLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpICsgKCcwJyArIGNvbG9yLmcudG9TdHJpbmcoMTYpKS5zbGljZSgtMikgKyAoJzAnICsgY29sb3IuYi50b1N0cmluZygxNikpLnNsaWNlKC0yKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocGFyc2VJbnQoY29sb3IxNiwgMTYpKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodzEgPCA3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3MSAqPSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZFkgKz0gNDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyaWRZICs9IDI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy9kcmF3Q2ljXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuZHJhd0NpcmMocG9zWCAtIHBvc1hGICsgMjAsIHBvc1kgLSBwb3NZRiArIHRoYXQuYm1kLmhlaWdodCArIDEwLCB3MSwgcGFyc2VJbnQoY29sb3IxNiwgMTYpKTtcblxuICAgICAgICAgICAgICAgICAgICAvL2RyYXdMaW5lXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhd0xpbmUocG9zWCAtIHBvc1hGICsgMjAsIHBvc1kgLSBwb3NZRiArIHRoYXQuYm1kLmhlaWdodCArIDEwLCB3MSwgcGFyc2VJbnQoY29sb3IxNiwgMTYpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHcxIDwgNykge1xuICAgICAgICAgICAgICAgICAgICBncmlkWCArPSA0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGdyaWRYICs9IDI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHRoYXQuYm1kID0gdGhpcy5tYWtlLmJpdG1hcERhdGEoKTtcbiAgICAgICAgICAgIHRoYXQuYm1kLmxvYWQoJ3BpYycpO1xuICAgICAgICAgICAgdGhhdC5ibWQuYWRkVG9Xb3JsZCgpO1xuXG5cbiAgICAgICAgICAgIHZhciBhcmVhID0gbmV3IFBoYXNlci5SZWN0YW5nbGUoMCwgMCwgdGhhdC5ibWQud2lkdGgsIHRoYXQuYm1kLmhlaWdodCk7XG4gICAgICAgICAgICB2YXIgdHJhY2tlciA9IG5ldyB0cmFja2luZy5PYmplY3RUcmFja2VyKFsnZmFjZSddKTtcbiAgICAgICAgICAgIHZhciBwaWNJbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgICAgIHBpY0ltZy5zcmMgPSB3aW5kb3cucGF0aDtcbiAgICAgICAgICAgIHRyYWNrZXIub24oJ3RyYWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTm8gb2JqZWN0cyB3ZXJlIGRldGVjdGVkIGluIHRoaXMgZnJhbWUuXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdubyBmYWNlJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2dldCBmaXJzdCBmYWNlJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhhdC5wbG90KGV2ZW50LmRhdGFbMF0ueCwgZXZlbnQuZGF0YVswXS55LCBldmVudC5kYXRhWzBdLmhlaWdodCwgZXZlbnQuZGF0YVswXS53aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuZmFjZXBpeGVsKGV2ZW50LmRhdGFbMF0ueCwgZXZlbnQuZGF0YVswXS55LCBldmVudC5kYXRhWzBdLmhlaWdodCwgZXZlbnQuZGF0YVswXS53aWR0aCk7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHBpY0ltZy5vbmxvYWQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHRyYWNraW5nLnRyYWNrKHBpY0ltZywgdHJhY2tlcik7XG4gICAgICAgICAgICAgICAgdHJhY2tlci5zZXRTdGVwU2l6ZSgxLjcpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhhdC5ldmVudEluaXQoKTtcblxuICAgICAgICB9LFxuXG5cbiAgICAgICAgdXBkYXRlOiBmdW5jdGlvbigpIHt9XG5cbiAgICB9O1xuXG59KCkpOyJdfQ==
